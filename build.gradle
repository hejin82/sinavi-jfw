buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.7.0'
        classpath 'org.ajoberstar:gradle-git:0.6.4'
    }
}

allprojects {
    apply plugin : 'java'
    apply plugin : 'eclipse'
    apply plugin : 'checkstyle'
    apply plugin : 'findbugs'
    apply plugin : 'jacoco'
    apply plugin : 'idea'
    apply plugin : 'license'
    apply plugin : 'signing'
    apply plugin : 'maven'
    apply plugin : 'project-report'

    repositories {
        mavenCentral()
        maven {
            url 'http://repo.springsource.org/plugins-release'
        }
        maven {
            url 'http://amateras.sourceforge.jp/mvn'
        }
        maven {
            url 'http://repo.spring.io/snapshot'
        }
    }

    eclipse {
        classpath {
            downloadSources=true
        }
    }

    [javadoc]*.options*.encoding = 'UTF-8'
    [compileJava, compileTestJava].each {
        it.sourceCompatibility = 1.6
        it.targetCompatibility = 1.6
        it.options.encoding = 'UTF-8'
    }

    license {
        ext.year = Calendar.getInstance().get(Calendar.YEAR)
        header rootProject.file("${rootDir}/config/LICENSE_TEMPLATE")
        ignoreFailures false
        skipExistingHeaders true
        strictCheck true
        useDefaultMappings false
        mapping('java',"SLASHSTAR_STYLE")
    }

    compileJava.dependsOn("licenseTest")
    compileTestJava.dependsOn("licenseTest")

    configurations {
        provided
        compile.extendsFrom provided
        all*.exclude group: "commons-logging", module: "commons-logging"
    }

    ext {
        springVersion = '4.0.2.RELEASE'
        springMongoVersion = '1.4.0.M1'
        springAmqpVersion = '1.3.0.RC1'
        springRetryVersion = '1.0.3.RELEASE'
        jaxRsVersion = '2.0'
        jacksonVersion = '1.9.13'
        jerseyVersion = '2.7'
        mybatisVersion = '3.2.5'
        mybatisSpringVersion = '1.2.2'
        beanValidationVersion = '1.1.0.Final'
        hibernateValidatorVersion = '5.1.0.Final'
        elVersion = '2.2.4'
        commonsFileuploadVersion = '1.3.1'
        commonsValidatorVersion = '1.4.0'
        commonsDbcpVersion = '1.4'
        commonsIoVersion = '2.0.1'
        commonsCollectionsVersion = '3.2.1'
        commonsLangVersion = '2.6'
        commonsCodecVersion = '1.5'
        slf4jVersion = '1.7.6'
        logbackVersion = '1.1.1'
        guavaVersion = '16.0.1'
        openCsvVersion = '2.3'
        
        junitVersion = '4.11'
        mockitoVersion = '1.9.5'
        h2Version = '1.3.173'
        
        servletApiVersion = '3.0.1'
        cglibVersion = '3.1'
        asmVersion = '3.3.1'
        aspectjVersion = '1.7.3'
        jspApiVersion = '2.2'
        jstlVersion = '1.2'
        
        checkstyleVersion = '5.6'
        findbugsVersion = '2.0.3'
    }

    dependencies {
        compile "org.slf4j:slf4j-api:${slf4jVersion}"
        compile "ch.qos.logback:logback-classic:${logbackVersion}"
        compile "org.slf4j:jcl-over-slf4j:${slf4jVersion}"
        compile "com.google.guava:guava:${guavaVersion}"
        compile "commons-lang:commons-lang:${commonsLangVersion}"
        testCompile "junit:junit:${junitVersion}"
        testCompile "org.mockito:mockito-core:${mockitoVersion}"
        checkstyle "com.puppycrawl.tools:checkstyle:${checkstyleVersion}"
        findbugs "com.google.code.findbugs:findbugs:${findbugsVersion}"
        runtime "cglib:cglib-nodep:${cglibVersion}"
        runtime "asm:asm:${asmVersion}"
        runtime "org.aspectj:aspectjweaver:${aspectjVersion}"
        provided "javax.servlet:javax.servlet-api:${servletApiVersion}"
    }

    test {
        testLogging {
            events "failed"
            exceptionFormat "full"
            debug {
                events "started", "skipped", "failed"
                exceptionFormat "full"
            }
        }
        exclude '**/*$*'
    }

    checkstyle {
        configFile = file("${rootDir}/config/checkstyle/ctc-checks.xml")
        ignoreFailures = true
        toolVersion = '5.6'
    }

    findbugs {
        ignoreFailures = true
        ext.excludes = { exclude compileTestJava.destinationDir }
    }

    jacoco {
        toolVersion = '0.6.4.201312101107'
    }

    jacocoTestReport {
        reports {
            xml.enabled false
            csv.enabled false
            html.destination "${buildDir}/jacocoHtml"
        }
    }

    task resourceCopy(type: Copy) {
        from relativePath(processResources.destinationDir)
        into relativePath(compileTestJava.destinationDir)
        include '**/*.xml'
        include '*.xml'
        include '*.properties'
    }

    test.dependsOn("resourceCopy")

}

configure(rootProject) {
    task wrapper(type: Wrapper) {
        description = "Generates gradlew[.bat] scripts"
        gradleVersion = "1.11"
    }

}

configure(subprojects) {subproject ->
    apply plugin : 'github-pages'
    group = 'jp.co.ctc-g.jfw'
    defaultTasks 'clean', 'packages', 'uploadArchives'
    jar {
        doFirst {
            manifest.attributes["Created-By"] =  "${System.getProperty("java.version")}"
            manifest.attributes["Implementation-Vendor"] = 'ITOCHU Techno-Solutions Corporation.'
            manifest.attributes["Implementation-Title"] = subproject.name
            manifest.attributes["Implementation-Version"] = subproject.version
        }
    }
    javadoc {
        doFirst {
            description = "Generates project-level javadoc for use in -javadoc jar"
            options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
            options.author = true
            options.overview = "${rootDir}/config/javadoc/html/overview.html"
            options.charSet = 'UTF-8'
            options.docTitle  = "${subproject.name} ${subproject.version}"
            options.windowTitle  = "${subproject.name} ${subproject.version}"
            options.header = "<h1>${subproject.name}</h1>"
            options.bottom = "<i>Copyright &#169; 2011-2014 ITOCHU Techno-Solutions Corporation.</i>"
            options.destinationDirectory = file("${project.docsDir}/javadoc/${subproject.name}/${subproject.version}/api")
        }
    }
    signing {
        required { 
            gradle.taskGraph.hasTask("uploadArchives")
        }
        sign configurations.archives
    }
    configurations {
        deployerJars
    }
    dependencies {
        deployerJars "org.apache.maven.wagon:wagon-ssh:2.2"
    }
    uploadArchives {
        dependsOn signArchives
        repositories.mavenDeployer {
            configuration = configurations.deployerJars
            repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2') {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }
            snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }
            pom.project {
                group 'jp.co.ctc-g.jfw'
                packaging 'jar'
                inceptionYear '2014'
                url 'https://github.com/ctc-g/sinavi-jfw'
                organization {
                    name 'ctc-g'
                    url 'https://github.com/ctc-g'
                }
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
                scm {
                    connection 'scm:git:git://github.com/ctc-g/sinavi-jfw'
                    developerConnection 'scm:git:git://github.com/ctc-g/sinavi-jfw'
                    url 'https://github.com/ctc-g/sinavi-jfw'
                }
            }
        }
    }
    githubPages {
        repoUri = 'https://github.com/ctc-g/sinavi-jfw.git'
        pages {
            from(javadoc.outputs.files) {
                into "docs/projects"
            }
        }
        workingPath = "build/ghpages"
    }
    task sourcesJar(type: Jar, dependsOn:classes) {
        classifier = "sources"
        from sourceSets.main.allJava.srcDirs
        include "**/*.java"
    }
    task javadocJar(type: Jar, dependsOn:javadoc) {
        classifier = "javadoc"
        from javadoc.destinationDir
    }
    task codeChecks(dependsOn: [
        'checkstyleMain',
        'findbugsMain',
    ])
    task packages(dependsOn: [
        'codeChecks',
        'jar',
        'sourcesJar',
        'javadocJar'
    ])
    artifacts {
        archives sourcesJar
        archives javadocJar
    }
}

project("jfw-util-core") {
    description = 'SINAVI J-Framework Utility'
    defaultTasks 'clean', 'packages', 'uploadArchives'
    dependencies {
        compile "commons-collections:commons-collections:${commonsCollectionsVersion}"
        compile "org.springframework:spring-beans:${springVersion}"
    }
}

project("jfw-resource-core") {
    description = 'SINAVI J-Framework Resource'
    defaultTasks 'clean', 'packages', 'uploadArchives'
    dependencies {
        compile project(':jfw-util-core')
        compile "commons-collections:commons-collections:${commonsCollectionsVersion}"
        compile "org.springframework:spring-core:${springVersion}",
                "org.springframework:spring-context:${springVersion}"
        testCompile "org.springframework:spring-test:${springVersion}"
    }
}

project("jfw-exception-core") {
    description = 'SINAVI J-Framework Exception'
    defaultTasks 'clean', 'packages', 'uploadArchives'
    dependencies {
        compile project(':jfw-util-core')
        compile project(':jfw-resource-core')
        compile "commons-collections:commons-collections:${commonsCollectionsVersion}"
        compile "org.springframework:spring-core:${springVersion}"
        testCompile "org.springframework:spring-test:${springVersion}"
    }
}

project("jfw-web-util-core") {
    description = 'SINAVI J-Framework Web Utility'
    defaultTasks 'clean', 'packages', 'uploadArchives'
    dependencies {
        compile project(':jfw-util-core')
        compile project(':jfw-exception-core')
        compile "commons-collections:commons-collections:${commonsCollectionsVersion}"
        compile "org.springframework:spring-core:${springVersion}",
                "org.springframework:spring-context:${springVersion}"
        testCompile "org.springframework:spring-test:${springVersion}"
    }
}

project("jfw-test") {
    description = 'SINAVI J-Framework Test Utility'
    defaultTasks 'clean', 'packages', 'uploadArchives'
    dependencies {
        compile project(':jfw-util-core')
        compile "commons-io:commons-io:${commonsIoVersion}"
        compile "commons-fileupload:commons-fileupload:${commonsFileuploadVersion}"
        compile "junit:junit:${junitVersion}"
        compile "org.mockito:mockito-core:${mockitoVersion}"
        compile "org.springframework:spring-core:${springVersion}",
                "org.springframework:spring-context:${springVersion}",
                "org.springframework:spring-beans:${springVersion}",
                "org.springframework:spring-test:${springVersion}"
    }
}

project("jfw-data-mongodb-test") {
    description = 'SINAVI J-Framework Test Utility'
    defaultTasks 'clean', 'packages', 'uploadArchives'
    defaultTasks 'clean', 'packages'
    dependencies {
        compile project(':jfw-test')
        compile "commons-io:commons-io:${commonsIoVersion}"
        compile "commons-fileupload:commons-fileupload:${commonsFileuploadVersion}"
        compile "junit:junit:${junitVersion}"
        compile "org.mockito:mockito-core:${mockitoVersion}"
        compile "org.springframework.data:spring-data-mongodb:${springMongoVersion}"
        compile "org.codehaus.jackson:jackson-core-asl:${jacksonVersion}",
                "org.codehaus.jackson:jackson-mapper-asl:${jacksonVersion}",
                "org.codehaus.jackson:jackson-xc:${jacksonVersion}",
                "org.codehaus.jackson:jackson-jaxrs:${jacksonVersion}"
    }
}

project("jfw-web-core") {
    description = 'SINAVI J-Framework Web'
    defaultTasks 'clean', 'packages', 'uploadArchives'
    dependencies {
        compile project(':jfw-exception-core')
        compile project(':jfw-web-util-core')
        compile "javax.validation:validation-api:${beanValidationVersion}"
        compile "commons-dbcp:commons-dbcp:${commonsDbcpVersion}"
        compile "commons-fileupload:commons-fileupload:${commonsFileuploadVersion}"
        compile "commons-io:commons-io:${commonsIoVersion}"
        compile "commons-collections:commons-collections:${commonsCollectionsVersion}"
        compile "commons-codec:commons-codec:${commonsCodecVersion}"
        compile "org.springframework:spring-core:${springVersion}",
                "org.springframework:spring-context:${springVersion}",
                "org.springframework:spring-beans:${springVersion}",
                "org.springframework:spring-expression:${springVersion}",
                "org.springframework:spring-aop:${springVersion}",
                "org.springframework:spring-web:${springVersion}",
                "org.springframework:spring-webmvc:${springVersion}"
        compile "commons-validator:commons-validator:${commonsValidatorVersion}"
        testCompile project(':jfw-test')
        testCompile "javax.el:javax.el-api:${elVersion}"
        provided "javax.servlet.jsp:jsp-api:${jspApiVersion}"
        provided "javax.servlet:jstl:${jstlVersion}"
    }
}

project("jfw-mybatis-core") {
    description = 'SINAVI J-Framework MyBatis'
    defaultTasks 'clean', 'packages', 'uploadArchives'
    dependencies {
        compile project(':jfw-web-util-core')
        compile "org.mybatis:mybatis:${mybatisVersion}"
        compile "org.mybatis:mybatis-spring:${mybatisSpringVersion}"
        compile "org.springframework:spring-core:${springVersion}",
                "org.springframework:spring-context:${springVersion}",
                "org.springframework:spring-beans:${springVersion}"
        testCompile project(':jfw-test')
        testCompile "org.springframework:spring-test:${springVersion}"
        testCompile "org.springframework:spring-jdbc:${springVersion}"
        testCompile "commons-dbcp:commons-dbcp:${commonsDbcpVersion}"
        testCompile "com.h2database:h2:${h2Version}"
    }
}

project("jfw-rest-core") {
    description = 'SINAVI J-Framework REST Client for JAX-RS'
    defaultTasks 'clean', 'packages', 'uploadArchives'
    dependencies {
        compile "javax.ws.rs:javax.ws.rs-api:${jaxRsVersion}"
        compile "org.codehaus.jackson:jackson-core-asl:${jacksonVersion}",
                "org.codehaus.jackson:jackson-mapper-asl:${jacksonVersion}"
    }
}

project("jfw-rest-plugin-jersey") {
    description = 'SINAVI J-Framework REST Client for JAX-RS (Jersey)'
    defaultTasks 'clean', 'packages', 'uploadArchives'
    dependencies {
        compile project(':jfw-util-core')
        compile project(':jfw-exception-core')
        compile project(':jfw-rest-core')
        compile "org.glassfish.jersey.containers:jersey-container-servlet:${jerseyVersion}",
                "org.glassfish.jersey.core:jersey-client:${jerseyVersion}",
                "org.glassfish.jersey.connectors:jersey-grizzly-connector:${jerseyVersion}",
                "org.glassfish.jersey.connectors:jersey-apache-connector:${jerseyVersion}",
                "org.glassfish.jersey.ext:jersey-bean-validation:${jerseyVersion}",
                "org.glassfish.jersey.media:jersey-media-json-jackson:${jerseyVersion}"
        testCompile "org.glassfish.jersey.test-framework:jersey-test-framework-core:${jerseyVersion}",
                "org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-simple:${jerseyVersion}",
                "org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-external:${jerseyVersion}",
                "org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-default-client:${jerseyVersion}"
        testCompile project(':jfw-validation-core')
    }
}

project("jfw-rest-plugin-springmvc") {
    description = 'SINAVI J-Framework REST Plugin for SpringMVC'
    defaultTasks 'clean', 'packages', 'uploadArchives'
    dependencies {
        compile project(':jfw-rest-core')
        compile project(':jfw-exception-core')
        compile "org.springframework:spring-context:${springVersion}",
                "org.springframework:spring-test:${springVersion}",
                "org.springframework:spring-web:${springVersion}",
                "org.springframework:spring-webmvc:${springVersion}"
        compile 'org.apache.httpcomponents:httpclient:4.3'
        testCompile "org.springframework:spring-test:${springVersion}"
        testCompile("org.eclipse.jetty:jetty-servlet:8.1.5.v20120716") {
            exclude group: "org.eclipse.jetty.orbit", module: "javax.servlet"
        }
        testCompile("org.eclipse.jetty:jetty-server:8.1.5.v20120716") {
            exclude group: "org.eclipse.jetty.orbit", module: "javax.servlet"
        }
    }
}

project("jfw-validation-core") {
    description = 'SINAVI J-Framework Bean Validation'
    defaultTasks 'clean', 'packages', 'uploadArchives'
    dependencies {
        compile (project(':jfw-util-core'))
        compile "javax.validation:validation-api:${beanValidationVersion}"
        compile "org.hibernate:hibernate-validator:${hibernateValidatorVersion}"
        compile "javax.el:javax.el-api:${elVersion}"
        compile "org.glassfish.web:javax.el:${elVersion}"
        compile "commons-validator:commons-validator:${commonsValidatorVersion}"
    }
}

project("jfw-amqp-core") {
    description = 'SINAVI J-Framework AMQP'
    defaultTasks 'clean', 'packages', 'uploadArchives'
    dependencies {
        compile project(':jfw-util-core')
        compile project(':jfw-exception-core')
        compile "org.springframework.amqp:spring-amqp:${springAmqpVersion}",
                "org.springframework.amqp:spring-rabbit:${springAmqpVersion}"
        compile "org.springframework.retry:spring-retry:${springRetryVersion}"
        testCompile "org.springframework:spring-test:${springVersion}"
        testCompile "org.springframework:spring-tx:${springVersion}"
        runtime "org.codehaus.jackson:jackson-core-asl:${jacksonVersion}",
                "org.codehaus.jackson:jackson-mapper-asl:${jacksonVersion}"
    }
}

project("jfw-csv-core") {
    description = 'SINAVI J-Framework CSV'
    defaultTasks 'clean', 'packages', 'uploadArchives'
    dependencies {
        compile project(':jfw-util-core')
        compile project(':jfw-exception-core')
        compile project(':jfw-validation-core')
        compile "net.sf.opencsv:opencsv:${openCsvVersion}"
        compile 'net.sourceforge.collections:collections-generic:4.01'
        compile "org.mybatis:mybatis:${mybatisVersion}"
        testCompile project(':jfw-test')
        testCompile "org.mybatis:mybatis-spring:${mybatisSpringVersion}"
        testCompile "org.springframework:spring-jdbc:${springVersion}"
        testCompile "com.h2database:h2:${h2Version}"
    }
}

project("jfw-excel-core") {
    description = 'SINAVI J-Framework Excel'
    defaultTasks 'clean', 'packages', 'uploadArchives'
    dependencies { 
        compile 'jp.sf.amateras.xlsbeans:xlsbeans:1.2.1'
    }
}
